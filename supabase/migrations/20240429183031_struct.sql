


create table "public"."blogposts" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."blogposts" enable row level security;

create table "public"."cart_items" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "product" bigint not null,
    "user" uuid not null
);


alter table "public"."cart_items" enable row level security;

create table "public"."products" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "name" text not null,
    "image_path" text not null,
    "costs" bigint not null
);


alter table "public"."products" enable row level security;

CREATE UNIQUE INDEX blogposts_pkey ON public.blogposts USING btree (id);

CREATE UNIQUE INDEX cart_items_pkey ON public.cart_items USING btree (id);

CREATE UNIQUE INDEX products_pkey ON public.products USING btree (id);

alter table "public"."blogposts" add constraint "blogposts_pkey" PRIMARY KEY using index "blogposts_pkey";

alter table "public"."cart_items" add constraint "cart_items_pkey" PRIMARY KEY using index "cart_items_pkey";

alter table "public"."products" add constraint "products_pkey" PRIMARY KEY using index "products_pkey";

alter table "public"."cart_items" add constraint "public_cart_items_product_fkey" FOREIGN KEY (product) REFERENCES products(id) ON UPDATE RESTRICT ON DELETE CASCADE not valid;

alter table "public"."cart_items" validate constraint "public_cart_items_product_fkey";

alter table "public"."cart_items" add constraint "public_cart_items_user_fkey" FOREIGN KEY ("user") REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."cart_items" validate constraint "public_cart_items_user_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.copy_anon_cart(anon_id uuid)
 RETURNS void
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$BEGIN
  INSERT INTO cart_items (product, "user")
    SELECT product, auth.uid() FROM cart_items c
    WHERE c.user = anon_id
    AND EXISTS (
      SELECT FROM auth.users a
      WHERE a.id = anon_id AND a.is_anonymous = true
    );
END;$function$
;

grant delete on table "public"."blogposts" to "anon";

grant insert on table "public"."blogposts" to "anon";

grant references on table "public"."blogposts" to "anon";

grant select on table "public"."blogposts" to "anon";

grant trigger on table "public"."blogposts" to "anon";

grant truncate on table "public"."blogposts" to "anon";

grant update on table "public"."blogposts" to "anon";

grant delete on table "public"."blogposts" to "authenticated";

grant insert on table "public"."blogposts" to "authenticated";

grant references on table "public"."blogposts" to "authenticated";

grant select on table "public"."blogposts" to "authenticated";

grant trigger on table "public"."blogposts" to "authenticated";

grant truncate on table "public"."blogposts" to "authenticated";

grant update on table "public"."blogposts" to "authenticated";

grant delete on table "public"."blogposts" to "service_role";

grant insert on table "public"."blogposts" to "service_role";

grant references on table "public"."blogposts" to "service_role";

grant select on table "public"."blogposts" to "service_role";

grant trigger on table "public"."blogposts" to "service_role";

grant truncate on table "public"."blogposts" to "service_role";

grant update on table "public"."blogposts" to "service_role";

grant delete on table "public"."cart_items" to "anon";

grant insert on table "public"."cart_items" to "anon";

grant references on table "public"."cart_items" to "anon";

grant select on table "public"."cart_items" to "anon";

grant trigger on table "public"."cart_items" to "anon";

grant truncate on table "public"."cart_items" to "anon";

grant update on table "public"."cart_items" to "anon";

grant delete on table "public"."cart_items" to "authenticated";

grant insert on table "public"."cart_items" to "authenticated";

grant references on table "public"."cart_items" to "authenticated";

grant select on table "public"."cart_items" to "authenticated";

grant trigger on table "public"."cart_items" to "authenticated";

grant truncate on table "public"."cart_items" to "authenticated";

grant update on table "public"."cart_items" to "authenticated";

grant delete on table "public"."cart_items" to "service_role";

grant insert on table "public"."cart_items" to "service_role";

grant references on table "public"."cart_items" to "service_role";

grant select on table "public"."cart_items" to "service_role";

grant trigger on table "public"."cart_items" to "service_role";

grant truncate on table "public"."cart_items" to "service_role";

grant update on table "public"."cart_items" to "service_role";

grant delete on table "public"."products" to "anon";

grant insert on table "public"."products" to "anon";

grant references on table "public"."products" to "anon";

grant select on table "public"."products" to "anon";

grant trigger on table "public"."products" to "anon";

grant truncate on table "public"."products" to "anon";

grant update on table "public"."products" to "anon";

grant delete on table "public"."products" to "authenticated";

grant insert on table "public"."products" to "authenticated";

grant references on table "public"."products" to "authenticated";

grant select on table "public"."products" to "authenticated";

grant trigger on table "public"."products" to "authenticated";

grant truncate on table "public"."products" to "authenticated";

grant update on table "public"."products" to "authenticated";

grant delete on table "public"."products" to "service_role";

grant insert on table "public"."products" to "service_role";

grant references on table "public"."products" to "service_role";

grant select on table "public"."products" to "service_role";

grant trigger on table "public"."products" to "service_role";

grant truncate on table "public"."products" to "service_role";

grant update on table "public"."products" to "service_role";

create policy "auth users can read"
on "public"."blogposts"
as permissive
for select
to authenticated
using ((((auth.jwt() -> 'is_anonymous'::text))::boolean = false));


create policy "allow to control own cart"
on "public"."cart_items"
as permissive
for all
to public
using (("user" = auth.uid()))
with check (("user" = auth.uid()));


create policy "everyone can read products"
on "public"."products"
as permissive
for select
to public
using (true);



